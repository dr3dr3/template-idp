name: ON-DISPATCH-DEPLOY-STATICSITE
run-name: Deploy Static Site ( Triggered by ${{ github.event_name }} and run by ${{ github.actor }} )

on:
  repository_dispatch:
    types: [deploy-staticsite]
  workflow_dispatch:
    inputs:
      success:
        required: true
        type: boolean
      deployment-stage:
        required: true
        type: string
      source-repo-owner:
        required: true
        type: string
      source-repo-name:
        required: true
        type: string
  
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  
  ### TODO: May need to get build artifacts from other sources???
  get-build-artifacts:
    name: Get build artifect from ${{ github.event.client_payload.source-repo-name || inputs.source-repo-name }}
    if: ${{ github.event.client_payload.success || github.event_name == 'workflow_dispatch' }}
    uses: dr3dr3/core-pipeline/.github/workflows/staticsite-get-build-artifact.yml@main
    permissions:
      contents: none
    with:
      ### TODO: Need this for client payload too
      artifact-url: ${{ format('{0}/{1}/{2}/{3}', 'https://api.github.com/repos', inputs.source-repo-owner, inputs.source-repo-name, 'releases/latest' ) }}
      artifact-ref: ${{ format('{0}-{1}', 'RC', github.run_id ) }}

  environment-logic:
    name: Get target environment for deployment
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: none
    outputs:
      target: ${{ steps.target.outputs.TARGET }}
    env:
      DEPLOYMENT_STAGE: ${{ github.event.client_payload.deployment-stage || inputs.deployment-stage }}
    ### TODO: Read config from environment/staticsite.yml
    ### TODO: Get env variables from service repo where need (as outputs for deploy step). Secrets?
    ### TODO: Check infrastructure is ready (i.e. Vercel project exists)
    steps:

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Target
        id: target
        run: |
          config=$(ds=$DEPLOYMENT_STAGE yq '.environments[] | select(.id == env(ds))' configuration/environments/staticsite.yml -o=json | jq -c)
          target=$(echo $config | jq -r '.target')
          echo $target
          echo "TARGET=$target" >> $GITHUB_OUTPUT

      # - name: Get environment configuration
      #   run: |
      #     target=$(yq '.environments[] | select(.id == "${{ github.event.client_payload.deployment-stage }}")' environment/staticsite.yml -o=json | jq -c)
      #     echo $target

  ### New job... IF infrastructure is not ready, then do day1 creation of infrastructure

  ### New job... check if required secrets exist (i.e. VERCEL_ORG_ID)

  vercel-variables:
    name: Set Vercel environment variables
    needs: [get-build-artifacts, environment-logic]
    if: ${{ needs.environment-logic.outputs.target == 'VERCEL' }}
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      vercel-project-id: ${{ steps.vercel-project-id.outputs.result }}
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4

      - name: Install Node dependencies
        run: npm install

      - name: Check variable exists
        id: vercel-project-id
        run: .github/actions-scripts/repo-vars-get-value.mjs
        env:
          GHA_TOKEN: ${{ secrets.GHAPAT_IDP_REPO }}
          REPO_OWNER: ${{ inputs.source-repo-owner }}
          REPO_NAME: ${{ inputs.source-repo-name }}
          VAR_NAME: 'VERCEL_PROJECT_ID'

  deploy-vercel:
    name: Deploy to ${{ github.event.client_payload.deployment-stage }} environment
    needs: [vercel-variables, get-build-artifacts, environment-logic]
    ### if: ${{ needs.environment-logic.outputs.target == 'VERCEL' }}
    uses: dr3dr3/core-ops/.github/workflows/staticsite-vercel-deployment.yml@main
    permissions:
      contents: read
    secrets: inherit
    with:
      artefact-ref: ${{ format('{0}-{1}', 'RC', github.run_id ) }}
      vercel-project-id: ${{ needs.vercel-variables.outputs.vercel-project-id }}